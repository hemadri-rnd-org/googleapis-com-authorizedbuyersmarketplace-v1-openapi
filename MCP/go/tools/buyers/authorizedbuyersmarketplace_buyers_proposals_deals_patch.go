package tools

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strings"
	"bytes"

	"github.com/authorized-buyers-marketplace-api/mcp-server/config"
	"github.com/authorized-buyers-marketplace-api/mcp-server/models"
	"github.com/mark3labs/mcp-go/mcp"
)

func Authorizedbuyersmarketplace_buyers_proposals_deals_patchHandler(cfg *config.APIConfig) func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
	return func(ctx context.Context, request mcp.CallToolRequest) (*mcp.CallToolResult, error) {
		args, ok := request.Params.Arguments.(map[string]any)
		if !ok {
			return mcp.NewToolResultError("Invalid arguments object"), nil
		}
		nameVal, ok := args["name"]
		if !ok {
			return mcp.NewToolResultError("Missing required path parameter: name"), nil
		}
		name, ok := nameVal.(string)
		if !ok {
			return mcp.NewToolResultError("Invalid path parameter: name"), nil
		}
		queryParams := make([]string, 0)
		if val, ok := args["updateMask"]; ok {
			queryParams = append(queryParams, fmt.Sprintf("updateMask=%v", val))
		}
		// Handle multiple authentication parameters
		if cfg.BearerToken != "" {
			queryParams = append(queryParams, fmt.Sprintf("access_token=%s", cfg.BearerToken))
		}
		if cfg.APIKey != "" {
			queryParams = append(queryParams, fmt.Sprintf("key=%s", cfg.APIKey))
		}
		if cfg.BearerToken != "" {
			queryParams = append(queryParams, fmt.Sprintf("oauth_token=%s", cfg.BearerToken))
		}
		queryString := ""
		if len(queryParams) > 0 {
			queryString = "?" + strings.Join(queryParams, "&")
		}
		// Create properly typed request body using the generated schema
		var requestBody models.Deal
		
		// Optimized: Single marshal/unmarshal with JSON tags handling field mapping
		if argsJSON, err := json.Marshal(args); err == nil {
			if err := json.Unmarshal(argsJSON, &requestBody); err != nil {
				return mcp.NewToolResultError(fmt.Sprintf("Failed to convert arguments to request type: %v", err)), nil
			}
		} else {
			return mcp.NewToolResultError(fmt.Sprintf("Failed to marshal arguments: %v", err)), nil
		}
		
		bodyBytes, err := json.Marshal(requestBody)
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Failed to encode request body", err), nil
		}
		url := fmt.Sprintf("%s/v1/%s%s", cfg.BaseURL, name, queryString)
		req, err := http.NewRequest("PATCH", url, bytes.NewBuffer(bodyBytes))
		req.Header.Set("Content-Type", "application/json")
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Failed to create request", err), nil
		}
		// Set authentication based on auth type
		// Handle multiple authentication parameters
		// API key already added to query string
		// API key already added to query string
		// API key already added to query string
		req.Header.Set("Accept", "application/json")

		resp, err := http.DefaultClient.Do(req)
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Request failed", err), nil
		}
		defer resp.Body.Close()

		body, err := io.ReadAll(resp.Body)
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Failed to read response body", err), nil
		}

		if resp.StatusCode >= 400 {
			return mcp.NewToolResultError(fmt.Sprintf("API error: %s", body)), nil
		}
		// Use properly typed response
		var result models.Deal
		if err := json.Unmarshal(body, &result); err != nil {
			// Fallback to raw text if unmarshaling fails
			return mcp.NewToolResultText(string(body)), nil
		}

		prettyJSON, err := json.MarshalIndent(result, "", "  ")
		if err != nil {
			return mcp.NewToolResultErrorFromErr("Failed to format JSON", err), nil
		}

		return mcp.NewToolResultText(string(prettyJSON)), nil
	}
}

func CreateAuthorizedbuyersmarketplace_buyers_proposals_deals_patchTool(cfg *config.APIConfig) models.Tool {
	tool := mcp.NewTool("patch_v1_name",
		mcp.WithDescription("Updates the given deal at the buyer known revision number. If the server revision has advanced since the passed-in proposal.proposal_revision an ABORTED error message will be returned. The revision number is incremented by the server whenever the proposal or its constituent deals are updated. Note: The revision number is kept at a proposal level. The buyer of the API is expected to keep track of the revision number after the last update operation and send it in as part of the next update request. This way, if there are further changes on the server (for example, seller making new updates), then the server can detect conflicts and reject the proposed changes."),
		mcp.WithString("name", mcp.Required(), mcp.Description("Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}")),
		mcp.WithString("updateMask", mcp.Description("List of fields to be updated. If empty or unspecified, the service will update all fields populated in the update request excluding the output only fields and primitive fields with default value. Note that explicit field mask is required in order to reset a primitive field back to its default value, for example, false for boolean fields, 0 for integer fields. A special field mask consisting of a single path \"*\" can be used to indicate full replacement(the equivalent of PUT method), updatable fields unset or unspecified in the input will be cleared or set to default value. Output only fields will be ignored regardless of the value of updateMask.")),
		mcp.WithObject("estimatedGrossSpend", mcp.Description("Input parameter: Represents an amount of money with its currency type.")),
		mcp.WithString("dealType", mcp.Description("Input parameter: Output only. Type of deal.")),
		mcp.WithObject("targeting", mcp.Description("Input parameter: Targeting represents different criteria that can be used to target inventory. For example, they can choose to target inventory only if the user is in the US. Multiple types of targeting are always applied as a logical AND, unless noted otherwise.")),
		mcp.WithObject("privateAuctionTerms", mcp.Description("Input parameter: Pricing terms for Private Auctions.")),
		mcp.WithObject("deliveryControl", mcp.Description("Input parameter: Message contains details about how the deal will be paced.")),
		mcp.WithString("flightStartTime", mcp.Description("Input parameter: Proposed flight start time of the deal. This will generally be stored in the granularity of one second since deal serving starts at seconds boundary. Any time specified with more granularity (for example, in milliseconds) will be truncated towards the start of time in seconds.")),
		mcp.WithString("publisherProfile", mcp.Description("Input parameter: Immutable. Reference to the seller on the deal. Format: `buyers/{buyerAccountId}/publisherProfiles/{publisherProfileId}`")),
		mcp.WithString("buyer", mcp.Description("Input parameter: Output only. Refers to a buyer in The Realtime-bidding API. Format: `buyers/{buyerAccountId}`")),
		mcp.WithString("flightEndTime", mcp.Description("Input parameter: Proposed flight end time of the deal. This will generally be stored in a granularity of a second. A value is not necessary for Private Auction deals.")),
		mcp.WithString("billedBuyer", mcp.Description("Input parameter: Output only. When the client field is populated, this field refers to the buyer who creates and manages the client buyer and gets billed on behalf of the client buyer; when the buyer field is populated, this field is the same value as buyer. Format : `buyers/{buyerAccountId}`")),
		mcp.WithString("client", mcp.Description("Input parameter: Output only. Refers to a Client. Format: `buyers/{buyerAccountId}/clients/{clientAccountid}`")),
		mcp.WithString("updateTime", mcp.Description("Input parameter: Output only. The time when the deal was last updated.")),
		mcp.WithString("createTime", mcp.Description("Input parameter: Output only. The time of the deal creation.")),
		mcp.WithString("description", mcp.Description("Input parameter: Output only. Free text description for the deal terms.")),
		mcp.WithObject("programmaticGuaranteedTerms", mcp.Description("Input parameter: Pricing terms for Programmatic Guaranteed Deals.")),
		mcp.WithObject("preferredDealTerms", mcp.Description("Input parameter: Pricing terms for Preferred Deals.")),
		mcp.WithObject("creativeRequirements", mcp.Description("Input parameter: Message captures data about the creatives in the deal.")),
		mcp.WithString("name", mcp.Description("Input parameter: Immutable. The unique identifier of the deal. Auto-generated by the server when a deal is created. Format: buyers/{accountId}/proposals/{proposalId}/deals/{dealId}")),
		mcp.WithString("proposalRevision", mcp.Description("Input parameter: Output only. The revision number for the proposal and is the same value as proposal.proposal_revision. Each update to deal causes the proposal revision number to auto-increment. The buyer keeps track of the last revision number they know of and pass it in when making an update. If the head revision number on the server has since incremented, then an ABORTED error is returned during the update operation to let the buyer know that a subsequent update was made.")),
		mcp.WithObject("sellerTimeZone", mcp.Description("Input parameter: Represents a time zone from the [IANA Time Zone Database](https://www.iana.org/time-zones).")),
		mcp.WithString("displayName", mcp.Description("Input parameter: Output only. The name of the deal. Maximum length of 255 unicode characters is allowed. Control characters are not allowed. Buyers cannot update this field. Note: Not to be confused with name, which is a unique identifier of the deal.")),
	)

	return models.Tool{
		Definition: tool,
		Handler:    Authorizedbuyersmarketplace_buyers_proposals_deals_patchHandler(cfg),
	}
}
